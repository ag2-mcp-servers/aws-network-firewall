# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:50:34+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ActionName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]+$', min_length=1, max_length=128)


class AddressDefinition(
    RootModel[
        constr(pattern=r'^([a-fA-F\d:\.]+($|/\d{1,3}))$', min_length=1, max_length=255)
    ]
):
    root: constr(
        pattern=r'^([a-fA-F\d:\.]+($|/\d{1,3}))$', min_length=1, max_length=255
    )


class AttachmentStatus(Enum):
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    SCALING = 'SCALING'
    READY = 'READY'


class AvailabilityZone(RootModel[str]):
    root: str


class AzSubnet(
    RootModel[constr(pattern=r'^subnet-[0-9a-f]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^subnet-[0-9a-f]+$', min_length=1, max_length=128)


class AzSubnets(RootModel[List[AzSubnet]]):
    root: List[AzSubnet]


class Boolean(RootModel[bool]):
    root: bool


class CIDRCount(RootModel[conint(ge=0, le=1000000)]):
    root: conint(ge=0, le=1000000)


class CollectionMemberString(RootModel[str]):
    root: str


class ConfigurationSyncState(Enum):
    PENDING = 'PENDING'
    IN_SYNC = 'IN_SYNC'
    CAPACITY_CONSTRAINED = 'CAPACITY_CONSTRAINED'


class DeleteResourcePolicyResponse(BaseModel):
    pass


class Description(RootModel[constr(pattern=r'^.*$', max_length=512)]):
    root: constr(pattern=r'^.*$', max_length=512)


class Destination(RootModel[constr(pattern=r'^.*$', min_length=1, max_length=1024)]):
    root: constr(pattern=r'^.*$', min_length=1, max_length=1024)


class DimensionValue(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_ ]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_ ]+$', min_length=1, max_length=128)


class EncryptionType(Enum):
    CUSTOMER_KMS = 'CUSTOMER_KMS'
    AWS_OWNED_KMS_KEY = 'AWS_OWNED_KMS_KEY'


class EndpointId(RootModel[str]):
    root: str


class FirewallStatusValue(Enum):
    PROVISIONING = 'PROVISIONING'
    DELETING = 'DELETING'
    READY = 'READY'


class GeneratedRulesType(Enum):
    ALLOWLIST = 'ALLOWLIST'
    DENYLIST = 'DENYLIST'


class HashMapKey(
    RootModel[constr(pattern=r'^[0-9A-Za-z.\-_@\/]+$', min_length=3, max_length=50)]
):
    root: constr(pattern=r'^[0-9A-Za-z.\-_@\/]+$', min_length=3, max_length=50)


class HashMapValue(
    RootModel[constr(pattern=r'[\s\S]*$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[\s\S]*$', min_length=1, max_length=1024)


class IPAddressType(Enum):
    DUALSTACK = 'DUALSTACK'
    IPV4 = 'IPV4'
    IPV6 = 'IPV6'


class IPSetArn(RootModel[str]):
    root: str


class IPSetMetadata(BaseModel):
    ResolvedCIDRCount: Optional[CIDRCount] = None


class IPSetMetadataMap(RootModel[Optional[Dict[str, IPSetMetadata]]]):
    root: Optional[Dict[str, IPSetMetadata]] = None


class IPSetReferenceName(
    RootModel[constr(pattern=r'^[A-Za-z][A-Za-z0-9_]*$', min_length=1, max_length=32)]
):
    root: constr(pattern=r'^[A-Za-z][A-Za-z0-9_]*$', min_length=1, max_length=32)


class InsufficientCapacityException(RootModel[Any]):
    root: Any


class InternalServerError(RootModel[Any]):
    root: Any


class InvalidOperationException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class InvalidResourcePolicyException(RootModel[Any]):
    root: Any


class InvalidTokenException(RootModel[Any]):
    root: Any


class KeyId(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=2048)


class Keyword(RootModel[constr(pattern=r'.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*', min_length=1, max_length=128)


class LastUpdateTime(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class LogDestinationMap(RootModel[Optional[Dict[str, HashMapValue]]]):
    root: Optional[Dict[str, HashMapValue]] = None


class LogDestinationPermissionException(RootModel[Any]):
    root: Any


class LogDestinationType(Enum):
    S3 = 'S3'
    CloudWatchLogs = 'CloudWatchLogs'
    KinesisDataFirehose = 'KinesisDataFirehose'


class LogType(Enum):
    ALERT = 'ALERT'
    FLOW = 'FLOW'


class NumberOfAssociations(RootModel[int]):
    root: int


class OverrideAction(Enum):
    DROP_TO_ALERT = 'DROP_TO_ALERT'


class PaginationMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PaginationToken(
    RootModel[constr(pattern=r'[0-9A-Za-z:\/+=]+$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'[0-9A-Za-z:\/+=]+$', min_length=1, max_length=2048)


class PerObjectSyncStatus(Enum):
    PENDING = 'PENDING'
    IN_SYNC = 'IN_SYNC'
    CAPACITY_CONSTRAINED = 'CAPACITY_CONSTRAINED'


class PolicyString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=395000)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=395000)


class Port(RootModel[constr(pattern=r'^.*$', min_length=1, max_length=1024)]):
    root: constr(pattern=r'^.*$', min_length=1, max_length=1024)


class PortRangeBound(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class Priority(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class ProtocolNumber(RootModel[conint(ge=0, le=255)]):
    root: conint(ge=0, le=255)


class ProtocolNumbers(RootModel[List[ProtocolNumber]]):
    root: List[ProtocolNumber]


class PutResourcePolicyResponse(BaseModel):
    pass


class ResourceArn(
    RootModel[constr(pattern=r'^arn:aws.*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^arn:aws.*', min_length=1, max_length=256)


class ResourceId(
    RootModel[
        constr(
            pattern=r'^([0-9a-f]{8})-([0-9a-f]{4}-){3}([0-9a-f]{12})$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9a-f]{8})-([0-9a-f]{4}-){3}([0-9a-f]{12})$',
        min_length=36,
        max_length=36,
    )


class ResourceManagedStatus(Enum):
    MANAGED = 'MANAGED'
    ACCOUNT = 'ACCOUNT'


class ResourceManagedType(Enum):
    AWS_MANAGED_THREAT_SIGNATURES = 'AWS_MANAGED_THREAT_SIGNATURES'
    AWS_MANAGED_DOMAIN_LISTS = 'AWS_MANAGED_DOMAIN_LISTS'


class ResourceName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=128)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceOwnerCheckException(RootModel[Any]):
    root: Any


class ResourceStatus(Enum):
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'


class RuleCapacity(RootModel[int]):
    root: int


class RuleGroupMetadata(BaseModel):
    Arn: Optional[ResourceArn] = None
    Name: Optional[ResourceName] = None


class RuleGroupType(Enum):
    STATELESS = 'STATELESS'
    STATEFUL = 'STATEFUL'


class RuleGroups(RootModel[List[RuleGroupMetadata]]):
    root: List[RuleGroupMetadata]


class RuleOrder(Enum):
    DEFAULT_ACTION_ORDER = 'DEFAULT_ACTION_ORDER'
    STRICT_ORDER = 'STRICT_ORDER'


class RuleTargets(RootModel[List[CollectionMemberString]]):
    root: List[CollectionMemberString]


class RuleVariableName(
    RootModel[constr(pattern=r'^[A-Za-z][A-Za-z0-9_]*$', min_length=1, max_length=32)]
):
    root: constr(pattern=r'^[A-Za-z][A-Za-z0-9_]*$', min_length=1, max_length=32)


class RulesString(RootModel[constr(min_length=0, max_length=2000000)]):
    root: constr(min_length=0, max_length=2000000)


class ServerCertificate(BaseModel):
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')


class ServerCertificates(RootModel[List[ServerCertificate]]):
    root: List[ServerCertificate]


class Setting(RootModel[constr(pattern=r'.*', min_length=1, max_length=8192)]):
    root: constr(pattern=r'.*', min_length=1, max_length=8192)


class Settings(RootModel[List[Setting]]):
    root: List[Setting]


class Source(RootModel[constr(pattern=r'^.*$', min_length=1, max_length=1024)]):
    root: constr(pattern=r'^.*$', min_length=1, max_length=1024)


class StatefulAction(Enum):
    PASS = 'PASS'
    DROP = 'DROP'
    ALERT = 'ALERT'
    REJECT = 'REJECT'


class StatefulActions(RootModel[List[CollectionMemberString]]):
    root: List[CollectionMemberString]


class StatefulRuleDirection(Enum):
    FORWARD = 'FORWARD'
    ANY = 'ANY'


class StatefulRuleGroupOverride(BaseModel):
    Action: Optional[OverrideAction] = None


class StatefulRuleGroupReference(BaseModel):
    Override: Optional[StatefulRuleGroupOverride] = None
    Priority_1: Optional[Priority] = Field(None, alias='Priority')
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class StatefulRuleGroupReferences(RootModel[List[StatefulRuleGroupReference]]):
    root: List[StatefulRuleGroupReference]


class StatefulRuleOptions(BaseModel):
    RuleOrder_1: Optional[RuleOrder] = Field(None, alias='RuleOrder')


class StatefulRuleProtocol(Enum):
    IP = 'IP'
    TCP = 'TCP'
    UDP = 'UDP'
    ICMP = 'ICMP'
    HTTP = 'HTTP'
    FTP = 'FTP'
    TLS = 'TLS'
    SMB = 'SMB'
    DNS = 'DNS'
    DCERPC = 'DCERPC'
    SSH = 'SSH'
    SMTP = 'SMTP'
    IMAP = 'IMAP'
    MSN = 'MSN'
    KRB5 = 'KRB5'
    IKEV2 = 'IKEV2'
    TFTP = 'TFTP'
    NTP = 'NTP'
    DHCP = 'DHCP'


class StatelessActions(RootModel[List[CollectionMemberString]]):
    root: List[CollectionMemberString]


class StatelessRuleGroupReference(BaseModel):
    Priority_1: Priority = Field(..., alias='Priority')
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class StatelessRuleGroupReferences(RootModel[List[StatelessRuleGroupReference]]):
    root: List[StatelessRuleGroupReference]


class StatusMessage(RootModel[str]):
    root: str


class StatusReason(
    RootModel[constr(pattern=r'^[a-zA-Z0-9- ]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9- ]+$', min_length=1, max_length=256)


class StreamExceptionPolicy(Enum):
    DROP = 'DROP'
    CONTINUE = 'CONTINUE'


class SubnetMapping(BaseModel):
    IPAddressType_1: Optional[IPAddressType] = Field(None, alias='IPAddressType')
    SubnetId: CollectionMemberString


class SubnetMappings(RootModel[List[SubnetMapping]]):
    root: List[SubnetMapping]


class TCPFlag(Enum):
    FIN = 'FIN'
    SYN = 'SYN'
    RST = 'RST'
    PSH = 'PSH'
    ACK = 'ACK'
    URG = 'URG'
    ECE = 'ECE'
    CWR = 'CWR'


class TLSInspectionConfigurationMetadata(BaseModel):
    Arn: Optional[ResourceArn] = None
    Name: Optional[ResourceName] = None


class TLSInspectionConfigurations(RootModel[List[TLSInspectionConfigurationMetadata]]):
    root: List[TLSInspectionConfigurationMetadata]


class TagKey(RootModel[constr(pattern=r'^.*$', min_length=1, max_length=128)]):
    root: constr(pattern=r'^.*$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(pattern=r'^.*$', min_length=0, max_length=256)]):
    root: constr(pattern=r'^.*$', min_length=0, max_length=256)


class TagsPaginationMaxResults(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class TargetType(Enum):
    TLS_SNI = 'TLS_SNI'
    HTTP_HOST = 'HTTP_HOST'


class TargetTypes(RootModel[List[TargetType]]):
    root: List[TargetType]


class ThrottlingException(RootModel[Any]):
    root: Any


class TlsCertificateData(BaseModel):
    CertificateArn: Optional[ResourceArn] = None
    CertificateSerial: Optional[CollectionMemberString] = None
    Status: Optional[CollectionMemberString] = None
    StatusMessage: Optional[StatusReason] = None


class UnsupportedOperationException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateToken(
    RootModel[
        constr(
            pattern=r'^([0-9a-f]{8})-([0-9a-f]{4}-){3}([0-9a-f]{12})$',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9a-f]{8})-([0-9a-f]{4}-){3}([0-9a-f]{12})$',
        min_length=1,
        max_length=1024,
    )


class VariableDefinition(RootModel[constr(pattern=r'^.*$', min_length=1)]):
    root: constr(pattern=r'^.*$', min_length=1)


class VariableDefinitionList(RootModel[List[VariableDefinition]]):
    root: List[VariableDefinition]


class VpcId(
    RootModel[constr(pattern=r'^vpc-[0-9a-f]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^vpc-[0-9a-f]+$', min_length=1, max_length=128)


class VpcIds(RootModel[List[VpcId]]):
    root: List[VpcId]


class XAmzTarget(Enum):
    NetworkFirewall_20201112_AssociateFirewallPolicy = (
        'NetworkFirewall_20201112.AssociateFirewallPolicy'
    )


class XAmzTarget1(Enum):
    NetworkFirewall_20201112_AssociateSubnets = (
        'NetworkFirewall_20201112.AssociateSubnets'
    )


class XAmzTarget2(Enum):
    NetworkFirewall_20201112_CreateFirewall = 'NetworkFirewall_20201112.CreateFirewall'


class XAmzTarget3(Enum):
    NetworkFirewall_20201112_CreateFirewallPolicy = (
        'NetworkFirewall_20201112.CreateFirewallPolicy'
    )


class XAmzTarget4(Enum):
    NetworkFirewall_20201112_CreateRuleGroup = (
        'NetworkFirewall_20201112.CreateRuleGroup'
    )


class XAmzTarget5(Enum):
    NetworkFirewall_20201112_CreateTLSInspectionConfiguration = (
        'NetworkFirewall_20201112.CreateTLSInspectionConfiguration'
    )


class XAmzTarget6(Enum):
    NetworkFirewall_20201112_DeleteFirewall = 'NetworkFirewall_20201112.DeleteFirewall'


class XAmzTarget7(Enum):
    NetworkFirewall_20201112_DeleteFirewallPolicy = (
        'NetworkFirewall_20201112.DeleteFirewallPolicy'
    )


class XAmzTarget8(Enum):
    NetworkFirewall_20201112_DeleteResourcePolicy = (
        'NetworkFirewall_20201112.DeleteResourcePolicy'
    )


class XAmzTarget9(Enum):
    NetworkFirewall_20201112_DeleteRuleGroup = (
        'NetworkFirewall_20201112.DeleteRuleGroup'
    )


class XAmzTarget10(Enum):
    NetworkFirewall_20201112_DeleteTLSInspectionConfiguration = (
        'NetworkFirewall_20201112.DeleteTLSInspectionConfiguration'
    )


class XAmzTarget11(Enum):
    NetworkFirewall_20201112_DescribeFirewall = (
        'NetworkFirewall_20201112.DescribeFirewall'
    )


class XAmzTarget12(Enum):
    NetworkFirewall_20201112_DescribeFirewallPolicy = (
        'NetworkFirewall_20201112.DescribeFirewallPolicy'
    )


class XAmzTarget13(Enum):
    NetworkFirewall_20201112_DescribeLoggingConfiguration = (
        'NetworkFirewall_20201112.DescribeLoggingConfiguration'
    )


class XAmzTarget14(Enum):
    NetworkFirewall_20201112_DescribeResourcePolicy = (
        'NetworkFirewall_20201112.DescribeResourcePolicy'
    )


class XAmzTarget15(Enum):
    NetworkFirewall_20201112_DescribeRuleGroup = (
        'NetworkFirewall_20201112.DescribeRuleGroup'
    )


class XAmzTarget16(Enum):
    NetworkFirewall_20201112_DescribeRuleGroupMetadata = (
        'NetworkFirewall_20201112.DescribeRuleGroupMetadata'
    )


class XAmzTarget17(Enum):
    NetworkFirewall_20201112_DescribeTLSInspectionConfiguration = (
        'NetworkFirewall_20201112.DescribeTLSInspectionConfiguration'
    )


class XAmzTarget18(Enum):
    NetworkFirewall_20201112_DisassociateSubnets = (
        'NetworkFirewall_20201112.DisassociateSubnets'
    )


class XAmzTarget19(Enum):
    NetworkFirewall_20201112_ListFirewallPolicies = (
        'NetworkFirewall_20201112.ListFirewallPolicies'
    )


class XAmzTarget20(Enum):
    NetworkFirewall_20201112_ListFirewalls = 'NetworkFirewall_20201112.ListFirewalls'


class XAmzTarget21(Enum):
    NetworkFirewall_20201112_ListRuleGroups = 'NetworkFirewall_20201112.ListRuleGroups'


class XAmzTarget22(Enum):
    NetworkFirewall_20201112_ListTLSInspectionConfigurations = (
        'NetworkFirewall_20201112.ListTLSInspectionConfigurations'
    )


class XAmzTarget23(Enum):
    NetworkFirewall_20201112_ListTagsForResource = (
        'NetworkFirewall_20201112.ListTagsForResource'
    )


class XAmzTarget24(Enum):
    NetworkFirewall_20201112_PutResourcePolicy = (
        'NetworkFirewall_20201112.PutResourcePolicy'
    )


class XAmzTarget25(Enum):
    NetworkFirewall_20201112_TagResource = 'NetworkFirewall_20201112.TagResource'


class XAmzTarget26(Enum):
    NetworkFirewall_20201112_UntagResource = 'NetworkFirewall_20201112.UntagResource'


class XAmzTarget27(Enum):
    NetworkFirewall_20201112_UpdateFirewallDeleteProtection = (
        'NetworkFirewall_20201112.UpdateFirewallDeleteProtection'
    )


class XAmzTarget28(Enum):
    NetworkFirewall_20201112_UpdateFirewallDescription = (
        'NetworkFirewall_20201112.UpdateFirewallDescription'
    )


class XAmzTarget29(Enum):
    NetworkFirewall_20201112_UpdateFirewallEncryptionConfiguration = (
        'NetworkFirewall_20201112.UpdateFirewallEncryptionConfiguration'
    )


class XAmzTarget30(Enum):
    NetworkFirewall_20201112_UpdateFirewallPolicy = (
        'NetworkFirewall_20201112.UpdateFirewallPolicy'
    )


class XAmzTarget31(Enum):
    NetworkFirewall_20201112_UpdateFirewallPolicyChangeProtection = (
        'NetworkFirewall_20201112.UpdateFirewallPolicyChangeProtection'
    )


class XAmzTarget32(Enum):
    NetworkFirewall_20201112_UpdateLoggingConfiguration = (
        'NetworkFirewall_20201112.UpdateLoggingConfiguration'
    )


class XAmzTarget33(Enum):
    NetworkFirewall_20201112_UpdateRuleGroup = (
        'NetworkFirewall_20201112.UpdateRuleGroup'
    )


class XAmzTarget34(Enum):
    NetworkFirewall_20201112_UpdateSubnetChangeProtection = (
        'NetworkFirewall_20201112.UpdateSubnetChangeProtection'
    )


class XAmzTarget35(Enum):
    NetworkFirewall_20201112_UpdateTLSInspectionConfiguration = (
        'NetworkFirewall_20201112.UpdateTLSInspectionConfiguration'
    )


class Address(BaseModel):
    AddressDefinition_1: AddressDefinition = Field(..., alias='AddressDefinition')


class Addresses(RootModel[List[Address]]):
    root: List[Address]


class AssociateFirewallPolicyRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    FirewallPolicyArn: ResourceArn
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class AssociateFirewallPolicyResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    FirewallPolicyArn: Optional[ResourceArn] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class AssociateSubnetsRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetMappings_1: SubnetMappings = Field(..., alias='SubnetMappings')
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class AssociateSubnetsResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetMappings_1: Optional[SubnetMappings] = Field(None, alias='SubnetMappings')
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class Attachment(BaseModel):
    EndpointId_1: Optional[EndpointId] = Field(None, alias='EndpointId')
    Status: Optional[AttachmentStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    SubnetId: Optional[AzSubnet] = None


class CIDRSummary(BaseModel):
    AvailableCIDRCount: Optional[CIDRCount] = None
    IPSetReferences: Optional[IPSetMetadataMap] = None
    UtilizedCIDRCount: Optional[CIDRCount] = None


class CapacityUsageSummary(BaseModel):
    CIDRs: Optional[CIDRSummary] = None


class Certificates(RootModel[List[TlsCertificateData]]):
    root: List[TlsCertificateData]


class DeleteFirewallPolicyRequest(BaseModel):
    FirewallPolicyArn: Optional[ResourceArn] = None
    FirewallPolicyName: Optional[ResourceName] = None


class DeleteFirewallRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None


class DeleteResourcePolicyRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class DeleteRuleGroupRequest(BaseModel):
    RuleGroupArn: Optional[ResourceArn] = None
    RuleGroupName: Optional[ResourceName] = None
    Type: Optional[RuleGroupType] = None


class DeleteTLSInspectionConfigurationRequest(BaseModel):
    TLSInspectionConfigurationArn: Optional[ResourceArn] = None
    TLSInspectionConfigurationName: Optional[ResourceName] = None


class DescribeFirewallPolicyRequest(BaseModel):
    FirewallPolicyArn: Optional[ResourceArn] = None
    FirewallPolicyName: Optional[ResourceName] = None


class DescribeFirewallRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None


class DescribeLoggingConfigurationRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None


class DescribeResourcePolicyRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class DescribeResourcePolicyResponse(BaseModel):
    Policy: Optional[PolicyString] = None


class DescribeRuleGroupMetadataRequest(BaseModel):
    RuleGroupArn: Optional[ResourceArn] = None
    RuleGroupName: Optional[ResourceName] = None
    Type: Optional[RuleGroupType] = None


class DescribeRuleGroupMetadataResponse(BaseModel):
    Capacity: Optional[RuleCapacity] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    LastModifiedTime: Optional[LastUpdateTime] = None
    RuleGroupArn: ResourceArn
    RuleGroupName: ResourceName
    StatefulRuleOptions_1: Optional[StatefulRuleOptions] = Field(
        None, alias='StatefulRuleOptions'
    )
    Type: Optional[RuleGroupType] = None


class DescribeRuleGroupRequest(BaseModel):
    RuleGroupArn: Optional[ResourceArn] = None
    RuleGroupName: Optional[ResourceName] = None
    Type: Optional[RuleGroupType] = None


class DescribeTLSInspectionConfigurationRequest(BaseModel):
    TLSInspectionConfigurationArn: Optional[ResourceArn] = None
    TLSInspectionConfigurationName: Optional[ResourceName] = None


class Dimension(BaseModel):
    Value: DimensionValue


class Dimensions(RootModel[List[Dimension]]):
    root: List[Dimension] = Field(..., max_length=1, min_length=1)


class DisassociateSubnetsRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetIds: AzSubnets
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class DisassociateSubnetsResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetMappings_1: Optional[SubnetMappings] = Field(None, alias='SubnetMappings')
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class EncryptionConfiguration(BaseModel):
    KeyId_1: Optional[KeyId] = Field(None, alias='KeyId')
    Type: EncryptionType


class FirewallMetadata(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None


class FirewallPolicyMetadata(BaseModel):
    Arn: Optional[ResourceArn] = None
    Name: Optional[ResourceName] = None


class Firewalls(RootModel[List[FirewallMetadata]]):
    root: List[FirewallMetadata]


class Flags(RootModel[List[TCPFlag]]):
    root: List[TCPFlag]


class Header(BaseModel):
    Destination_1: Destination = Field(..., alias='Destination')
    DestinationPort: Port
    Direction: StatefulRuleDirection
    Protocol: StatefulRuleProtocol
    Source_1: Source = Field(..., alias='Source')
    SourcePort: Port


class IPSet(BaseModel):
    Definition: VariableDefinitionList


class IPSetReference(BaseModel):
    ReferenceArn: Optional[ResourceArn] = None


class IPSetReferenceMap(RootModel[Optional[Dict[str, IPSetReference]]]):
    root: Optional[Dict[str, IPSetReference]] = None


class IPSets(RootModel[Optional[Dict[str, IPSet]]]):
    root: Optional[Dict[str, IPSet]] = None


class ListFirewallPoliciesRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None


class ListFirewallsRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None
    VpcIds_1: Optional[VpcIds] = Field(None, alias='VpcIds')


class ListFirewallsResponse(BaseModel):
    Firewalls_1: Optional[Firewalls] = Field(None, alias='Firewalls')
    NextToken: Optional[PaginationToken] = None


class ListRuleGroupsRequest(BaseModel):
    ManagedType: Optional[ResourceManagedType] = None
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None
    Scope: Optional[ResourceManagedStatus] = None
    Type: Optional[RuleGroupType] = None


class ListRuleGroupsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    RuleGroups_1: Optional[RuleGroups] = Field(None, alias='RuleGroups')


class ListTLSInspectionConfigurationsRequest(BaseModel):
    MaxResults: Optional[PaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None


class ListTLSInspectionConfigurationsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    TLSInspectionConfigurations_1: Optional[TLSInspectionConfigurations] = Field(
        None, alias='TLSInspectionConfigurations'
    )


class ListTagsForResourceRequest(BaseModel):
    MaxResults: Optional[TagsPaginationMaxResults] = None
    NextToken: Optional[PaginationToken] = None
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class LogDestinationConfig(BaseModel):
    LogDestination: LogDestinationMap
    LogDestinationType_1: LogDestinationType = Field(..., alias='LogDestinationType')
    LogType_1: LogType = Field(..., alias='LogType')


class LogDestinationConfigs(RootModel[List[LogDestinationConfig]]):
    root: List[LogDestinationConfig]


class LoggingConfiguration(BaseModel):
    LogDestinationConfigs_1: LogDestinationConfigs = Field(
        ..., alias='LogDestinationConfigs'
    )


class PerObjectStatus(BaseModel):
    SyncStatus: Optional[PerObjectSyncStatus] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class PortRange(BaseModel):
    FromPort: PortRangeBound
    ToPort: PortRangeBound


class PortRanges(RootModel[List[PortRange]]):
    root: List[PortRange]


class PortSet(BaseModel):
    Definition: Optional[VariableDefinitionList] = None


class PortSets(RootModel[Optional[Dict[str, PortSet]]]):
    root: Optional[Dict[str, PortSet]] = None


class PublishMetricAction(BaseModel):
    Dimensions_1: Dimensions = Field(..., alias='Dimensions')


class PutResourcePolicyRequest(BaseModel):
    Policy: PolicyString
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class ReferenceSets(BaseModel):
    IPSetReferences: Optional[IPSetReferenceMap] = None


class RuleOption(BaseModel):
    Keyword_1: Keyword = Field(..., alias='Keyword')
    Settings_1: Optional[Settings] = Field(None, alias='Settings')


class RuleOptions(RootModel[List[RuleOption]]):
    root: List[RuleOption]


class RuleVariables(BaseModel):
    IPSets_1: Optional[IPSets] = Field(None, alias='IPSets')
    PortSets_1: Optional[PortSets] = Field(None, alias='PortSets')


class RulesSourceList(BaseModel):
    GeneratedRulesType_1: GeneratedRulesType = Field(..., alias='GeneratedRulesType')
    TargetTypes_1: TargetTypes = Field(..., alias='TargetTypes')
    Targets: RuleTargets


class ServerCertificateScope(BaseModel):
    DestinationPorts: Optional[PortRanges] = None
    Destinations: Optional[Addresses] = None
    Protocols: Optional[ProtocolNumbers] = None
    SourcePorts: Optional[PortRanges] = None
    Sources: Optional[Addresses] = None


class ServerCertificateScopes(RootModel[List[ServerCertificateScope]]):
    root: List[ServerCertificateScope]


class SourceMetadata(BaseModel):
    SourceArn: Optional[ResourceArn] = None
    SourceUpdateToken: Optional[UpdateToken] = None


class StatefulEngineOptions(BaseModel):
    RuleOrder_1: Optional[RuleOrder] = Field(None, alias='RuleOrder')
    StreamExceptionPolicy_1: Optional[StreamExceptionPolicy] = Field(
        None, alias='StreamExceptionPolicy'
    )


class StatefulRule(BaseModel):
    Action: StatefulAction
    Header_1: Header = Field(..., alias='Header')
    RuleOptions_1: RuleOptions = Field(..., alias='RuleOptions')


class StatefulRules(RootModel[List[StatefulRule]]):
    root: List[StatefulRule]


class SyncStateConfig(RootModel[Optional[Dict[str, PerObjectStatus]]]):
    root: Optional[Dict[str, PerObjectStatus]] = None


class TCPFlagField(BaseModel):
    Flags_1: Flags = Field(..., alias='Flags')
    Masks: Optional[Flags] = None


class TCPFlags(RootModel[List[TCPFlagField]]):
    root: List[TCPFlagField]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=1)


class TagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    Tags: TagList


class UpdateFirewallDeleteProtectionRequest(BaseModel):
    DeleteProtection: Boolean
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class UpdateFirewallDeleteProtectionResponse(BaseModel):
    DeleteProtection: Optional[Boolean] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class UpdateFirewallDescriptionRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class UpdateFirewallDescriptionResponse(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class UpdateFirewallEncryptionConfigurationRequest(BaseModel):
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class UpdateFirewallEncryptionConfigurationResponse(BaseModel):
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class UpdateFirewallPolicyChangeProtectionRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    FirewallPolicyChangeProtection: Boolean
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class UpdateFirewallPolicyChangeProtectionResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    FirewallPolicyChangeProtection: Optional[Boolean] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class UpdateLoggingConfigurationRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )


class UpdateLoggingConfigurationResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )


class UpdateSubnetChangeProtectionRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetChangeProtection: Boolean
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class UpdateSubnetChangeProtectionResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetChangeProtection: Optional[Boolean] = None
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class ActionDefinition(BaseModel):
    PublishMetricAction_1: Optional[PublishMetricAction] = Field(
        None, alias='PublishMetricAction'
    )


class CreateFirewallRequest(BaseModel):
    DeleteProtection: Optional[Boolean] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    FirewallName: ResourceName
    FirewallPolicyArn: ResourceArn
    FirewallPolicyChangeProtection: Optional[Boolean] = None
    SubnetChangeProtection: Optional[Boolean] = None
    SubnetMappings_1: SubnetMappings = Field(..., alias='SubnetMappings')
    Tags: Optional[TagList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CustomAction(BaseModel):
    ActionDefinition_1: ActionDefinition = Field(..., alias='ActionDefinition')
    ActionName_1: ActionName = Field(..., alias='ActionName')


class CustomActions(RootModel[List[CustomAction]]):
    root: List[CustomAction]


class DescribeLoggingConfigurationResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )


class Firewall(BaseModel):
    DeleteProtection: Optional[Boolean] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    FirewallArn: Optional[ResourceArn] = None
    FirewallId: ResourceId
    FirewallName: Optional[ResourceName] = None
    FirewallPolicyArn: ResourceArn
    FirewallPolicyChangeProtection: Optional[Boolean] = None
    SubnetChangeProtection: Optional[Boolean] = None
    SubnetMappings_1: SubnetMappings = Field(..., alias='SubnetMappings')
    Tags: Optional[TagList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class FirewallPolicies(RootModel[List[FirewallPolicyMetadata]]):
    root: List[FirewallPolicyMetadata]


class FirewallPolicy(BaseModel):
    StatefulDefaultActions: Optional[StatefulActions] = None
    StatefulEngineOptions_1: Optional[StatefulEngineOptions] = Field(
        None, alias='StatefulEngineOptions'
    )
    StatefulRuleGroupReferences_1: Optional[StatefulRuleGroupReferences] = Field(
        None, alias='StatefulRuleGroupReferences'
    )
    StatelessCustomActions: Optional[CustomActions] = None
    StatelessDefaultActions: StatelessActions
    StatelessFragmentDefaultActions: StatelessActions
    StatelessRuleGroupReferences_1: Optional[StatelessRuleGroupReferences] = Field(
        None, alias='StatelessRuleGroupReferences'
    )
    TLSInspectionConfigurationArn: Optional[ResourceArn] = None


class FirewallPolicyResponse(BaseModel):
    ConsumedStatefulRuleCapacity: Optional[RuleCapacity] = None
    ConsumedStatelessRuleCapacity: Optional[RuleCapacity] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    FirewallPolicyArn: ResourceArn
    FirewallPolicyId: ResourceId
    FirewallPolicyName: ResourceName
    FirewallPolicyStatus: Optional[ResourceStatus] = None
    LastModifiedTime: Optional[LastUpdateTime] = None
    NumberOfAssociations_1: Optional[NumberOfAssociations] = Field(
        None, alias='NumberOfAssociations'
    )
    Tags: Optional[TagList] = None


class ListFirewallPoliciesResponse(BaseModel):
    FirewallPolicies_1: Optional[FirewallPolicies] = Field(
        None, alias='FirewallPolicies'
    )
    NextToken: Optional[PaginationToken] = None


class ListTagsForResourceResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Tags: Optional[TagList] = None


class MatchAttributes(BaseModel):
    DestinationPorts: Optional[PortRanges] = None
    Destinations: Optional[Addresses] = None
    Protocols: Optional[ProtocolNumbers] = None
    SourcePorts: Optional[PortRanges] = None
    Sources: Optional[Addresses] = None
    TCPFlags_1: Optional[TCPFlags] = Field(None, alias='TCPFlags')


class RuleDefinition(BaseModel):
    Actions: StatelessActions
    MatchAttributes_1: MatchAttributes = Field(..., alias='MatchAttributes')


class RuleGroupResponse(BaseModel):
    Capacity: Optional[RuleCapacity] = None
    ConsumedCapacity: Optional[RuleCapacity] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    LastModifiedTime: Optional[LastUpdateTime] = None
    NumberOfAssociations_1: Optional[NumberOfAssociations] = Field(
        None, alias='NumberOfAssociations'
    )
    RuleGroupArn: ResourceArn
    RuleGroupId: ResourceId
    RuleGroupName: ResourceName
    RuleGroupStatus: Optional[ResourceStatus] = None
    SnsTopic: Optional[ResourceArn] = None
    SourceMetadata_1: Optional[SourceMetadata] = Field(None, alias='SourceMetadata')
    Tags: Optional[TagList] = None
    Type: Optional[RuleGroupType] = None


class ServerCertificateConfiguration(BaseModel):
    Scopes: Optional[ServerCertificateScopes] = None
    ServerCertificates_1: Optional[ServerCertificates] = Field(
        None, alias='ServerCertificates'
    )


class ServerCertificateConfigurations(RootModel[List[ServerCertificateConfiguration]]):
    root: List[ServerCertificateConfiguration]


class StatelessRule(BaseModel):
    Priority_1: Priority = Field(..., alias='Priority')
    RuleDefinition_1: RuleDefinition = Field(..., alias='RuleDefinition')


class StatelessRules(RootModel[List[StatelessRule]]):
    root: List[StatelessRule]


class StatelessRulesAndCustomActions(BaseModel):
    CustomActions_1: Optional[CustomActions] = Field(None, alias='CustomActions')
    StatelessRules_1: StatelessRules = Field(..., alias='StatelessRules')


class SyncState(BaseModel):
    Attachment_1: Optional[Attachment] = Field(None, alias='Attachment')
    Config: Optional[SyncStateConfig] = None


class SyncStates(RootModel[Optional[Dict[str, SyncState]]]):
    root: Optional[Dict[str, SyncState]] = None


class TLSInspectionConfiguration(BaseModel):
    ServerCertificateConfigurations_1: Optional[ServerCertificateConfigurations] = (
        Field(None, alias='ServerCertificateConfigurations')
    )


class TLSInspectionConfigurationResponse(BaseModel):
    Certificates_1: Optional[Certificates] = Field(None, alias='Certificates')
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    LastModifiedTime: Optional[LastUpdateTime] = None
    NumberOfAssociations_1: Optional[NumberOfAssociations] = Field(
        None, alias='NumberOfAssociations'
    )
    TLSInspectionConfigurationArn: ResourceArn
    TLSInspectionConfigurationId: ResourceId
    TLSInspectionConfigurationName: ResourceName
    TLSInspectionConfigurationStatus: Optional[ResourceStatus] = None
    Tags: Optional[TagList] = None


class UpdateFirewallPolicyRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    DryRun: Optional[Boolean] = None
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    FirewallPolicy_1: FirewallPolicy = Field(..., alias='FirewallPolicy')
    FirewallPolicyArn: Optional[ResourceArn] = None
    FirewallPolicyName: Optional[ResourceName] = None
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class UpdateFirewallPolicyResponse(BaseModel):
    FirewallPolicyResponse_1: FirewallPolicyResponse = Field(
        ..., alias='FirewallPolicyResponse'
    )
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class UpdateRuleGroupResponse(BaseModel):
    RuleGroupResponse_1: RuleGroupResponse = Field(..., alias='RuleGroupResponse')
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class UpdateTLSInspectionConfigurationRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    TLSInspectionConfiguration_1: TLSInspectionConfiguration = Field(
        ..., alias='TLSInspectionConfiguration'
    )
    TLSInspectionConfigurationArn: Optional[ResourceArn] = None
    TLSInspectionConfigurationName: Optional[ResourceName] = None
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class UpdateTLSInspectionConfigurationResponse(BaseModel):
    TLSInspectionConfigurationResponse_1: TLSInspectionConfigurationResponse = Field(
        ..., alias='TLSInspectionConfigurationResponse'
    )
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class CreateFirewallPolicyRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    DryRun: Optional[Boolean] = None
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    FirewallPolicy_1: FirewallPolicy = Field(..., alias='FirewallPolicy')
    FirewallPolicyName: ResourceName
    Tags: Optional[TagList] = None


class CreateFirewallPolicyResponse(BaseModel):
    FirewallPolicyResponse_1: FirewallPolicyResponse = Field(
        ..., alias='FirewallPolicyResponse'
    )
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class CreateRuleGroupResponse(BaseModel):
    RuleGroupResponse_1: RuleGroupResponse = Field(..., alias='RuleGroupResponse')
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class CreateTLSInspectionConfigurationRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    TLSInspectionConfiguration_1: TLSInspectionConfiguration = Field(
        ..., alias='TLSInspectionConfiguration'
    )
    TLSInspectionConfigurationName: ResourceName
    Tags: Optional[TagList] = None


class CreateTLSInspectionConfigurationResponse(BaseModel):
    TLSInspectionConfigurationResponse_1: TLSInspectionConfigurationResponse = Field(
        ..., alias='TLSInspectionConfigurationResponse'
    )
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class DeleteFirewallPolicyResponse(BaseModel):
    FirewallPolicyResponse_1: FirewallPolicyResponse = Field(
        ..., alias='FirewallPolicyResponse'
    )


class DeleteRuleGroupResponse(BaseModel):
    RuleGroupResponse_1: RuleGroupResponse = Field(..., alias='RuleGroupResponse')


class DeleteTLSInspectionConfigurationResponse(BaseModel):
    TLSInspectionConfigurationResponse_1: TLSInspectionConfigurationResponse = Field(
        ..., alias='TLSInspectionConfigurationResponse'
    )


class DescribeFirewallPolicyResponse(BaseModel):
    FirewallPolicy_1: Optional[FirewallPolicy] = Field(None, alias='FirewallPolicy')
    FirewallPolicyResponse_1: FirewallPolicyResponse = Field(
        ..., alias='FirewallPolicyResponse'
    )
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class DescribeTLSInspectionConfigurationResponse(BaseModel):
    TLSInspectionConfiguration_1: Optional[TLSInspectionConfiguration] = Field(
        None, alias='TLSInspectionConfiguration'
    )
    TLSInspectionConfigurationResponse_1: TLSInspectionConfigurationResponse = Field(
        ..., alias='TLSInspectionConfigurationResponse'
    )
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class FirewallStatus(BaseModel):
    CapacityUsageSummary_1: Optional[CapacityUsageSummary] = Field(
        None, alias='CapacityUsageSummary'
    )
    ConfigurationSyncStateSummary: ConfigurationSyncState
    Status: FirewallStatusValue
    SyncStates_1: Optional[SyncStates] = Field(None, alias='SyncStates')


class RulesSource(BaseModel):
    RulesSourceList_1: Optional[RulesSourceList] = Field(None, alias='RulesSourceList')
    RulesString_1: Optional[RulesString] = Field(None, alias='RulesString')
    StatefulRules_1: Optional[StatefulRules] = Field(None, alias='StatefulRules')
    StatelessRulesAndCustomActions_1: Optional[StatelessRulesAndCustomActions] = Field(
        None, alias='StatelessRulesAndCustomActions'
    )


class CreateFirewallResponse(BaseModel):
    Firewall_1: Optional[Firewall] = Field(None, alias='Firewall')
    FirewallStatus_1: Optional[FirewallStatus] = Field(None, alias='FirewallStatus')


class DeleteFirewallResponse(BaseModel):
    Firewall_1: Optional[Firewall] = Field(None, alias='Firewall')
    FirewallStatus_1: Optional[FirewallStatus] = Field(None, alias='FirewallStatus')


class DescribeFirewallResponse(BaseModel):
    Firewall_1: Optional[Firewall] = Field(None, alias='Firewall')
    FirewallStatus_1: Optional[FirewallStatus] = Field(None, alias='FirewallStatus')
    UpdateToken_1: Optional[UpdateToken] = Field(None, alias='UpdateToken')


class RuleGroup(BaseModel):
    ReferenceSets_1: Optional[ReferenceSets] = Field(None, alias='ReferenceSets')
    RuleVariables_1: Optional[RuleVariables] = Field(None, alias='RuleVariables')
    RulesSource_1: RulesSource = Field(..., alias='RulesSource')
    StatefulRuleOptions_1: Optional[StatefulRuleOptions] = Field(
        None, alias='StatefulRuleOptions'
    )


class UpdateRuleGroupRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    DryRun: Optional[Boolean] = None
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    RuleGroup_1: Optional[RuleGroup] = Field(None, alias='RuleGroup')
    RuleGroupArn: Optional[ResourceArn] = None
    RuleGroupName: Optional[ResourceName] = None
    Rules: Optional[RulesString] = None
    SourceMetadata_1: Optional[SourceMetadata] = Field(None, alias='SourceMetadata')
    Type: Optional[RuleGroupType] = None
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')


class CreateRuleGroupRequest(BaseModel):
    Capacity: RuleCapacity
    Description_1: Optional[Description] = Field(None, alias='Description')
    DryRun: Optional[Boolean] = None
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    RuleGroup_1: Optional[RuleGroup] = Field(None, alias='RuleGroup')
    RuleGroupName: ResourceName
    Rules: Optional[RulesString] = None
    SourceMetadata_1: Optional[SourceMetadata] = Field(None, alias='SourceMetadata')
    Tags: Optional[TagList] = None
    Type: RuleGroupType


class DescribeRuleGroupResponse(BaseModel):
    RuleGroup_1: Optional[RuleGroup] = Field(None, alias='RuleGroup')
    RuleGroupResponse_1: RuleGroupResponse = Field(..., alias='RuleGroupResponse')
    UpdateToken_1: UpdateToken = Field(..., alias='UpdateToken')
